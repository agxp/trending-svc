// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/trending.proto

/*
Package trending is a generated protocol buffer package.

It is generated from these files:
	proto/trending.proto

It has these top-level messages:
	Request
	GetTrendingResponse
	PruneRequest
	PruneResponse
*/
package trending

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/agxp/cloudflix/video-hosting-svc/proto"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Trending service

type TrendingClient interface {
	GetTrending(ctx context.Context, in *Request, opts ...client.CallOption) (*GetTrendingResponse, error)
	Prune(ctx context.Context, in *PruneRequest, opts ...client.CallOption) (*PruneResponse, error)
}

type trendingClient struct {
	c           client.Client
	serviceName string
}

func NewTrendingClient(serviceName string, c client.Client) TrendingClient {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "trending"
	}
	return &trendingClient{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *trendingClient) GetTrending(ctx context.Context, in *Request, opts ...client.CallOption) (*GetTrendingResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Trending.GetTrending", in)
	out := new(GetTrendingResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trendingClient) Prune(ctx context.Context, in *PruneRequest, opts ...client.CallOption) (*PruneResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Trending.Prune", in)
	out := new(PruneResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Trending service

type TrendingHandler interface {
	GetTrending(context.Context, *Request, *GetTrendingResponse) error
	Prune(context.Context, *PruneRequest, *PruneResponse) error
}

func RegisterTrendingHandler(s server.Server, hdlr TrendingHandler, opts ...server.HandlerOption) {
	s.Handle(s.NewHandler(&Trending{hdlr}, opts...))
}

type Trending struct {
	TrendingHandler
}

func (h *Trending) GetTrending(ctx context.Context, in *Request, out *GetTrendingResponse) error {
	return h.TrendingHandler.GetTrending(ctx, in, out)
}

func (h *Trending) Prune(ctx context.Context, in *PruneRequest, out *PruneResponse) error {
	return h.TrendingHandler.Prune(ctx, in, out)
}
